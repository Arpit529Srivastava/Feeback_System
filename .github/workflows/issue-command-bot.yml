name: Issue Command Bot

on:
  issue_comment:
    types: [created]

permissions:
    issues: write
    pull-requests: write

jobs:
   process-command:
    runs-on: ubuntu-latest
    steps:
      - name: Process Command
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.trim().toLowerCase();
            const commenter = context.payload.comment.user.login;
            const issueNumber = context.payload.issue.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;

            async function handleLabel(labelName, color, description) {
                try {
                    await github.rest.issues.addLabels({
                        owner: repoOwner,
                        repo: repoName,
                        issue_number: issueNumber,
                        labels: [labelName]
                    });
                } catch (error) {
                    if (error.status === 404) {
                        await github.rest.issues.createLabel({
                            owner: repoOwner,
                            repo: repoName,
                            name: labelName,
                            color: color || "0e8a16",
                            description: description || ""
                        });
                        await github.rest.issues.addLabels({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            labels: [labelName]
                        });
                    } else {
                        console.error(`Error adding label ${labelName}:`, error);
                    }
                }
            }
            function parseCommand(comment, cmd) {
                if (!comment?.includes(cmd)) return null;
                const cmdIndex = comment.indexOf(cmd);
                return comment.substring(cmdIndex + cmd.length).trim() || null;
            }

            try {
                if (comment?.includes('/assign')) {
                    try {
                        let assignee = commenter;
                        const assigneeParam = parseCommand(comment, '/assign');
                        if (assigneeParam && assigneeParam.startsWith('@')) {
                            assignee = assigneeParam.substring(1).trim();
                        }
                        await github.rest.issues.addAssignees({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            assignees: [assignee]
                        });

                        await github.rest.issues.createComment({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            body: `✅ Assigned to ${assignee}`
                        });
                    } catch (error) {
                        await github.rest.issues.createComment({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            body: `❌ Error assigning issue to ${assignee}: ${error.message}`
                        });
                    }
                }

                if (comment?.includes('/close')) {
                    try {
                        await github.rest.issues.update({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            state: 'closed',
                            body: 'Closed by ' + commenter
                        });
                        await github.rest.issues.createComment({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            body: '✅ Closed by ' + commenter
                        });
                    } catch (error) {
                        await github.rest.issues.createComment({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            body: '❌ Error closing issue: ' + error.message
                        });
                    }
                }

                if (comment?.includes('/label')) {
                    try {
                        const labelName = parseCommand(comment, '/label');
                        if (labelName) {
                            await handleLabel(labelName, "0e8a16");
                            await github.rest.issues.createComment({
                                owner: repoOwner,
                                repo: repoName,
                                issue_number: issueNumber,
                                body: `✅ Added label "${labelName}"`
                            });
                        }
                    } catch (error) {
                        await github.rest.issues.createComment({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            body: '❌ Error adding label: ' + error.message
                        });
                    }
                }

                if (comment?.includes("/reopen")) {
                    try {
                        await github.rest.issues.update({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            state: 'open'
                        });
                        await github.rest.issues.createComment({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            body: '✅ Reopened by ' + commenter
                        });
                    } catch (error) {
                        await github.rest.issues.createComment({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            body: '❌ Error reopening issue: ' + error.message
                        });
                    }
                }

                if (comment?.includes('/help')) {
                    try {
                        await handleLabel('help', '008672', 'HELP NEEDED');
                    } catch (error) {
                        await github.rest.issues.createComment({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            body: '❌ Error adding help label: ' + error.message
                        });
                    }
                }

                if (comment?.includes("/cc")) {
                    try {
                        const mentionedUsers = comment.split("/cc")[1].trim().split(/[\s,]+/).filter(user => user.startsWith("@")).map(user => user.substring(1).trim());
                        if (!mentionedUsers.length) {
                            throw new Error("No valid users mentioned");
                        }

                        const mentionText = mentionedUsers.map(user => `@${user}`).join(", ");
                        await github.rest.issues.createComment({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            body: `✅ CC'd ${mentionText}`
                        });
                    } catch (error) {
                        await github.rest.issues.createComment({
                            owner: repoOwner,
                            repo: repoName,
                            issue_number: issueNumber,
                            body: '❌ Error adding CC: ' + error.message
                        });
                    }
                }
            } catch (error) {
                await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    body: '❌ Error processing command: ' + error.message
                });
            }
    